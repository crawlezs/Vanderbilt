tv_cor <- read.table('TV.txt')
View(tv_cor)
#load dataset
tv_cor <- read.table('TV.txt')
tv_cor <- as.matrix(tv_cor, rownames = NULL)
#load dataset
tv_cor <- read.table('TV.txt')
tv_cor <- as.matrix(tv_cor, rownames = FALSE)
tv_cor
View(tv_cor)
library(psych)
#load dataset
tv_cor <- read.table('TV.txt')
tv_cor <- as.matrix(tv_cor, rownames = FALSE)
# add column names
tv_names <- as.list("prof_box", "this_week", "today", "world_sports", "grandstands", "line-up", "match_day", "panorama", "rugby", "24")
colnames(tv_cor) <- c(tv_names)
View(tv_names)
View(tv_cor)
View(tv_names)
#load dataset
tv_cor <- read.table('TV.txt')
tv_cor <- as.matrix(tv_cor, rownames = FALSE)
# add column names
tv_names <- list("prof_box", "this_week", "today", "world_sports", "grandstands", "line-up", "match_day", "panorama", "rugby", "24")
print(tv_names)
colnames(tv_cor) <- c(tv_names)
tv_cor
#load dataset
tv_cor <- read.table('TV.txt')
tv_cor <- as.matrix(tv_cor, rownames = FALSE)
# add column names
tv_names <- list("prof_box", "this_week", "today", "world_sports", "grandstands", "line-up", "match_day", "panorama", "rugby", "24")
print(tv_names)
colnames(tv_cor) <- c(tv_names)
rownames(tv_cor) <- c(tv_names)
tv_cor
# create screeplot
# run paralell analysis
fa.parallel(tv_cor, fa = "pc", n.iter = 1000, error.bars = TRUE)
#load dataset
survey_R <- read.table('SERVICE_QUALITY.txt')
#load dataset
survey_R <- read.table('SERVICE_QUALITY.txt')
#load dataset
N <- 150
survey_R <- diag(1, 10)
survey_R[upper.tri(surveyR, TRUE)] <- scan('SERVICE_QUALITY.txt')
#load dataset
N <- 150
survey_R <- diag(1, 10)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
survey_R <- t(survey_R)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
#create row names
x_labels <- c("appearance", "lifestyle","status", "intensity", "disclosure","intention")
y_labels <- c("trust", "satisfaction", "cross_sell", "total_sales")
colnames(survey_R) <- rownames(survey_R) <- c(x_labels, y_labels)
survey_R
source("CCA_cor.R")
source("CCA_cor.R")
res <- CCA_cor(survey_R,var.x = 1:6, var.y = 7:10, cor.only = TRUE )
res
#load dataset
N <- 150
survey_R <- diag(1, 10)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
survey_R <- t(survey_R)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
#create row names
x_labels <- c("appearance", "lifestyle","status", "intensity", "disclosure","intention")
y_labels <- c("trust", "satisfaction", "cross_sell", "total_sales")
colnames(survey_R) <- rownames(survey_R) <- c(y_labels, x_labels,)
#load dataset
N <- 150
survey_R <- diag(1, 10)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
survey_R <- t(survey_R)
survey_R[upper.tri(survey_R, TRUE)] <- scan('SERVICE_QUALITY.txt')
#create row names
x_labels <- c("appearance", "lifestyle","status", "intensity", "disclosure","intention")
y_labels <- c("trust", "satisfaction", "cross_sell", "total_sales")
colnames(survey_R) <- rownames(survey_R) <- c(y_labels, x_labels)
survey_R
res <- CCA_cor(survey_R,var.x = 5:10, var.y = 1:4, cor.only = TRUE )
res
install.packages("CCP")
library(CCP)
library(CCP)
p.asym(rho=res$ca.cor, N, p=6, q=4, tstat = "Pillai")
#Calculate the GCD between the two sets of variables using the canonical correlations.
plot(res$ca.cor^2, xlab="", ylab="squared canonical correlations")
#Find the proportion of GCD explained by the first pair of CVs.
cumsum(res$ca.cor^2)/sum(res$ca.cor^2)
#Calculate the GCD between the two sets of variables using the canonical correlations.
plot(res$ca.cor^2, xlab="", ylab="squared canonical correlations")
#Find the proportion of GCD explained by the first pair of CVs.
cumsum(res$ca.cor^2)/sum(res$ca.cor^2)
# Extract the first pair of CVs
res <- CCA_cor(survey_R, var.x = 5:10, var.y = 1:4, m=1)
res$weights.x
res$weights.y
#What is the correlation between the first pair of CVs?
res$loading.x
res$loading.y
#What proportion of the total variance of the outcome variables is explained by the 1st CV of the outcome variables.
colSums(res$loading.y^2)/4
#Do the same for the explanatory variables (relation and interaction variables)
colSums(res$loading.x^2)/6
#Show the two loading matrices
res$loading.x
res$loading.y
# Extract the first PC from the six explanatory variables and find the PC weights wx.
survey_explan <- survey_R[5:10, 5:10]
survey_explan
# Extract the first PC from the four outcome variables and find the PC weights wy.
#Calculate the correlation between the two PCs: wx′ Rxywy. (Rxy is the 6 × 4 matrix that contains the correlations between  the explanatory and outcome variables. It is an off-diagonal block of the input.)
#Compare the correlation between the two PCs to the correlation in Problem 2. Explain why one is greater than  the other.
# Extract the first PC from the four outcome variables and find the PC weights wy.
survey_outcome <- survey_R[1:4, 1:4]
survey_outcome
# Extract the first PC from the six explanatory variables and find the PC weights wx.
survey_explan <- survey_R[5:10, 5:10]
res_explan <- principal(survey_explan, 1, rotate = "none")
#Calculate the correlation between the two PCs: wx′ Rxywy. (Rxy is the 6 × 4 matrix that contains the correlations between  the explanatory and outcome variables. It is an off-diagonal block of the input.)
# w_x' * Rxy * w_y
Rxy <- survey_R[5:10, 1:4]
Rxy
#Compare the correlation between the two PCs to the correlation in Problem 2. Explain why one is greater than  the other.
#Calculate the correlation between the two PCs: wx′ Rxywy. (Rxy is the 6 × 4 matrix that contains the correlations between  the explanatory and outcome variables. It is an off-diagonal block of the input.)
Rxy <- survey_R[5:10, 1:4]
Rxy
# w_x' * Rxy * w_y
t(w_x) %*% Rxy %*% w_y
data <- as.matrix(UScitiesD)
result <- cmdscale(data, k=2, eig=TRUE)
plot(result$eig)
abline(h=0)
plot(result$points,asp = 1,ylim=c(-2000,2000))
text(result$points[,1],result$points[,2],labels=rownames(result$points),cex=.7,pos=2)
View(data)
points<-result$points
points[,2]<- -points[,2]
plot(points,asp = 1,ylim=c(-2000,2000))
text(points[,1],points[,2],labels=rownames(points),cex=.7,pos=2)
result$GOF
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- results$eig
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig <- abs(eig)
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig <- abs(eig)
eig
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
(sapply(eig_abs[1:2], sum))/(sapply(eig_abs))
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
(sapply(eig_abs[1:2], sum))/(sapply(eig_abs), sum)
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
(sapply(eig_abs[1:2], sum))/(sapply(eig_abs, sum)
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (sapply(eig_abs[1:2], sum))/(sapply(eig_abs, sum)
GOF1
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (sapply(eig_abs[1:2], sum)) / (sapply(eig_abs, sum))
GOF1
#The second GOF treats eigenvalues as 0
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (sapply(eig_abs[1:2], sum)) / (sapply(eig_abs, sum))
GOF1
#The second GOF treats eigenvalues as 0
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- eig_abs[1] + eig_abs[2]
GOF1
#The second GOF treats eigenvalues as 0
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (eig_abs[1] + eig_abs[2]) /
(eig_abs[1] + eig_abs[2] + eig_abs[3] + eig_abs[4] + eig_abs[5] + eig_abs[6] + eig_abs[7] + eig_abs[8] + eig_abs[9] + eig_abs[10])
GOF1 /=
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (eig_abs[1] + eig_abs[2]) /
(eig_abs[1] + eig_abs[2] + eig_abs[3] + eig_abs[4] + eig_abs[5] + eig_abs[6] + eig_abs[7] + eig_abs[8] + eig_abs[9] + eig_abs[10])
GOF1
#The second GOF treats eigenvalues as 0
#GOF values in solution
result$GOF
result$eig
#The first GOF takes the absolute values of the negative eigenvalues in its calculation
eig <- result$eig
eig_abs <- abs(eig)
eig_abs
eig_0 <- replace(eig, 7:10, 0)
eig_0
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (eig_abs[1] + eig_abs[2]) / (eig_abs[1] + eig_abs[2] + eig_abs[3] + eig_abs[4] + eig_abs[5] + eig_abs[6] + eig_abs[7] + eig_abs[8] + eig_abs[9] + eig_abs[10])
GOF1
#The second GOF treats eigenvalues as 0
GOF2 <- (eig_0[1] + eig_0[2]) / (eig_0[1] + eig_0[2] + eig_0[3] + eig_0[4] + eig_0[5] + eig_0[6] + eig_0[7] + eig_0s[8] + eig_0[9] + eig_0[10])
#GOF = proportion of total eigenvalues retained by two dimensions
GOF1 <- (eig_abs[1] + eig_abs[2]) / (eig_abs[1] + eig_abs[2] + eig_abs[3] + eig_abs[4] + eig_abs[5] + eig_abs[6] + eig_abs[7] + eig_abs[8] + eig_abs[9] + eig_abs[10])
GOF1
#The second GOF treats eigenvalues as 0
GOF2 <- (eig_0[1] + eig_0[2]) / (eig_0[1] + eig_0[2] + eig_0[3] + eig_0[4] + eig_0[5] + eig_0[6] + eig_0[7] + eig_0[8] + eig_0[9] + eig_0[10])
GOF2
#GOF values in solution
result$GOF
