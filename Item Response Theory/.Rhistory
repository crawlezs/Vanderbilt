## Call libraries eRm, ltm, and mirt
library(eRm)
library(ltm)
library(mirt)
## Importing polytomous data (polytomous.txt)
poly <- read.table("Lab 3/polytomous.txt",header=TRUE)
poly[1:10,] # Checking the first 10 rows
poly[,1:10] # Checking the first 10 columns
poly[1:10,1:10] # Checking the first 10 rows and 10 columns
poly_10 <- poly[ ,10:20]
# Item parameters
rsm <- RSM(poly, se = TRUE, sum0 = TRUE)
rsm
summary(thresholds(rsm))
# Person parameters: MLE
rsm_person <- person.parameter(rsm)
summary(rsm_person)
# CCC
plotICC(rsm) # For all items
plotICC(rsm, item.subset=23:23) # Item 23
plotICC(rsm, item.subset=23:25) # Items 23, 24, and 25
# Item Information function
plotINFO(rsm, type="item")
# Test information function
plotINFO(rsm, type="test")
plotINFO(rsm)
# Wright map
plotPImap(rsm, sorted=TRUE, warn.ord.colour=TRUE, irug=TRUE)
plotPImap(rsm, sorted=F, warn.ord.colour=TRUE, irug=TRUE)
#warn.ord.colour=TRUE: Nonordinal threshold locations for polytomous items are coloured with this
#colour to make them more visible. This is especially useful when there are
#many items so that the plot is quite dense. The default is "black", so that there
#is no distinction made.
#irug=TRUE: If TRUE (the default), all thresholds are plotted below the person distribution to
#indicate where the included items are most informative.
## Fitting a partial credit model using 'eRm': Conditional MLE
pcm <- PCM(poly, se = TRUE, sum0 = TRUE)
pcm
summary(thresholds(pcm))
# Person parameters: MLE
pcm_person <- person.parameter(pcm)
summary(pcm_person)
# CCC
plotICC(pcm) # For all items
plotICC(pcm, item.subset=23:23) # Item 23
plotICC(pcm, item.subset=23:25) # Items 23, 24, and 25
thresholds(pcm)
# Item & test Information functions
plotINFO(pcm)
# Wright map
plotPImap(pcm, sorted=TRUE)
# Item parameters
gpcm <- gpcm(poly, IRT.param = TRUE)
summary(gpcm)
# Person parameters
gpcm_person <- factor.scores(gpcm)
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
coef.grm
# Person parameters
theta<-fscores(grm, full.scores.SE=TRUE)
theta[1:10,]
write.table(theta, file="C:/Teaching/IRT I_2023 Spring/Labs/Lab 3/theta.txt", sep = "\t", row.names=F)
# Person parameters
theta<-fscores(grm, full.scores.SE=TRUE)
theta[1:10,]
write.table(theta, file="Lab3/theta.txt", sep = "\t", row.names=F)
# Person parameters
theta<-fscores(grm, full.scores.SE=TRUE)
theta[1:10,]
write.table(theta, file="Lab 3/theta.txt", sep = "\t", row.names=F)
# CCC
itemplot(grm, 1) #CCC for item 1
# Item & test Information functions
itemplot(grm, 1, type = 'info') #item information for item 1
plot(grm, type = 'info') #test information for all items
## Rasch model
binary <- read.table("C:/Teaching/IRT I_2023 Spring/Labs/Lab 2/binary.txt",header=TRUE)
## Rasch model
binary <- read.table("Lab 2/binary.txt",header=TRUE)
# eRM: sum to 0 for item locations; conditional MLE
library(eRm)
Rasch_erm <- RM(binary, se = TRUE, sum0 = FALSE)
Rasch_erm
plotPImap(Rasch_erm, sort=TRUE)
# irtoys: mean of ability=0 constraint; marginal MLE
library(irtoys)
library(ltm)
Rasch_irtoys <- est(binary,model="1PL",engine="ltm",rasch=TRUE)
Rasch_irtoys
fsc <- factor.scores(rasch(binary))
plot(fsc,include.items=TRUE)
## Call libraries eRm, ltm, and mirt
library(eRm)
library(ltm)
library(mirt)
## Importing polytomous data
poly <- read.csv("HW 3/data.csv",header=TRUE)
poly[1:10,1:10] # Checking the first 10 rows and 10 columns
## Call libraries eRm, ltm, and mirt
library(eRm)
library(ltm)
library(mirt)
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
coef.grm
# CCC
itemplot(grm, 3) #CCC for item 3 - level: low
itemplot(grm, 15) #CCC for item 15 - level: medium
itemplot(grm, 2) #CCC for item 2 - level: high
# Item & test Information functions
plot(grm, type = 'info') #test information for all items
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
Coef.grm
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
coef.grm
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
summary(coef.grm)
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
coef.grm
## Fitting a generalized partial credit model using 'ltm': Marginal MLE
# Item parameters
gpcm <- gpcm(poly, IRT.param = TRUE)
summary(gpcm)
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
summary(coef.grm)
#Wright Map
plotPImap(grm, sorted=TRUE, warn.ord.colour=TRUE, irug=TRUE)
#Wright Map
plotPImap(coeff.grm, sorted=TRUE, warn.ord.colour=TRUE, irug=TRUE)
#Wright Map
plotPImap(coef.grm, sorted=TRUE, warn.ord.colour=TRUE, irug=TRUE)
#Wright Map
plotPImap(grm, sorted=TRUE, warn.ord.colour=TRUE, irug=TRUE)
# Person parameters
theta<-fscores(grm, full.scores.SE=TRUE)
theta[1:10,]
write.table(theta, file="HW 3/theta.txt", sep = "\t", row.names=F)
## Fitting a graded response model using 'mirt'
# Item parameters
grm <- mirt(poly, 1, itemtype='graded', method="EM", SE=TRUE)
coef.grm <-coef(grm, printSE=TRUE, as.data.frame=TRUE)
coef.grm
## Fitting a generalized partial credit model using 'ltm': Marginal MLE
# Item parameters
gpcm <- gpcm(poly, IRT.param = TRUE)
gpcm
#create dataframe
df <- matrix(3,3)
#create dataframe
df <- matrix(3,3)
df[1,1] <- 6
df[1,2] <- 8
#create dataframe
df <- matrix(0,3,3)
df[1,1] <- 6
df[1,2] <- 8
df[1,3] <- 8
df[2,1] <- 4
df[2,2] <- 12
df[2,3] <- 12
df[3,1] <- 1
df[3,2] <- 3
df[3,3] <- 2
df
# run 3x3 fisher's exact test
a <- fisher.test(df)
print(a)
#load packages
library(tidyverse)
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#import data
poly <- read_csv("m@h.csv")
#import data
poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- itemfit(grm)
install.packages(c("admisc", "blob", "car", "cli", "commonmark", "datawizard", "dbplyr", "dplyr", "dtplyr", "ggplot2", "googledrive", "googlesheets4", "GPArotation", "gtable", "hms", "htmltools", "MASS", "mgcv", "modelr", "pillar", "ps", "psych", "rlang", "rmarkdown", "robustbase", "survival", "tibble", "vctrs", "xfun"))
install.packages(c("admisc", "blob", "car", "cli", "commonmark", "datawizard", "dbplyr", "dplyr", "dtplyr", "ggplot2", "googledrive", "googlesheets4", "GPArotation", "gtable", "hms", "htmltools", "MASS", "mgcv", "modelr", "pillar", "ps", "psych", "rlang", "rmarkdown", "robustbase", "survival", "tibble", "vctrs", "xfun"))
#load packages
library(tidyverse)
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#import data
poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- itemfit(grm)
#load packages
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#import data
#poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- itemfit(grm)
# Item fit
itemfit <- mirt::itemfit(grm)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv")
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv")
setwd("~/Projects/PSYGS8880")
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv")
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "PSYGS8880/itemfit.csv", row.names = TRUE)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "PSYGS8880\itemfit.csv", row.names = TRUE)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv", row.names = TRUE)
##Graphical approach
itemfit(grm, group.bins=15, empirical.plot = 1, method = 'ML')
## Person fit
personfit <- mirt::personfit(grm)
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
View(poly)
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
which(is.na(poly))
is.na(poly)
which(is.na(poly))
which(poly, is.na(poly))
#load packages
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#import data
poly <- read_csv("m@h.csv")
#load packages
library(tidyverse)
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
#import data
poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv", row.names = TRUE)
##Graphical approach
itemfit(grm, group.bins=15, empirical.plot = 1, method = 'ML')
##Graphical approach
itemfit(grm, group.bins=17, empirical.plot = 1, method = 'ML')
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
poly2 <- na.omit(poly)
#import data
poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
poly <- na.omit(poly)
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv", row.names = TRUE)
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
personfit
#Result of "Zh" is residual-based statistic, which is explained in the 28th course slide.
## Log-likelihood for AIC and BIC
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
personfit
#Result of "Zh" is residual-based statistic, which is explained in the 28th course slide.
## Log-likelihood for AIC and BIC
write.csv(itemfit, "personfit.csv", row.names = TRUE)
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
personfit
#Result of "Zh" is residual-based statistic, which is explained in the 28th course slide.
## Log-likelihood for AIC and BIC
write.csv(personfit, "personfit.csv", row.names = TRUE)
## fitting PCM in mirt for the comparison with GRM
## If the data have more than two categories then a partial credit model is used instead
pcm <- mirt(poly, 1, itemtype='Rasch', method="EM", SE=TRUE)
#load packages
library(tidyverse)
library(irtoys)
library(ltm)
library(mirt)
library(eRm)
#import data
poly <- read_csv("m@h.csv")
poly <- poly[,1:17]
poly <- na.omit(poly)
#Item parameters
grm <- mirt(poly, 1, itemtype = 'graded', method = 'EM', SE = TRUE)
coef.grm <- coef(grm, printSE = TRUE, as.data.frame = TRUE)
coef.grm
# Person parameters
theta <- fscores(grm, full.scores.SE = TRUE)
theta[1:10,]
write.table(theta, file = "hw4_grmtheta.txt", sep = "\t", row.names= F)
# Item fit
itemfit <- mirt::itemfit(grm, na.rm=TRUE)
itemfit
write.csv(itemfit, "itemfit.csv", row.names = TRUE)
##Graphical approach
itemfit(grm, group.bins=17, empirical.plot = 1, method = 'ML')
## Person fit
personfit <- mirt::personfit(grm, na.rm=TRUE)
personfit
#Result of "Zh" is residual-based statistic, which is explained in the 28th course slide.
## Log-likelihood for AIC and BIC
write.csv(personfit, "personfit.csv", row.names = TRUE)
## fitting PCM in mirt for the comparison with GRM
## If the data have more than two categories then a partial credit model is used instead
pcm <- mirt(poly, 1, itemtype='Rasch', method="EM", SE=TRUE)
anova(pcm,grm)
## fitting PCM in mirt for the comparison with GRM
## If the data have more than two categories then a partial credit model is used instead
pcm <- mirt(poly, 1, itemtype='Rasch', method="EM", SE=TRUE)
library(lordif)
data <- read_csv("m@h_full.csv")
library(lordif)
library(tidyverse)
data <- read_csv("m@h_full.csv")
data <- na.omit(data)
data <- data[4:21]
y <- subset(data, select = -TD)
group <-data$TD
y <- as.data.frame(y)
group <- as.data.frame(group)
length(y)
length(group)
dim(y)
dim(group)
#calculate DIF
DIF <- lordif(y,group)
y <- subset(data, select = -TD)
group <-data$TD
#y <- as.data.frame(y)
#group <- as.data.frame(group)
length(y)
length(group)
dim(y)
dim(group)
#calculate DIF
DIF <- lordif(y,group)
library(lordif)
library(tidyverse)
data <- read_csv("m@h_full.csv", na = "NA")
data <- data[4:21]
View(data)
summary(data)
y <- subset(data, select = -TD)
group <-data$TD
#y <- as.data.frame(y)
#group <- as.data.frame(group)
length(y)
length(group)
dim(y)
dim(group)
#calculate DIF
DIF <- lordif(y,group)
y2 <- matrix(0, 17, 346)
for(c in 1:17){
for(r in 1:346){
x <- y[r,c]
y2[c,r] <- as.numeric(x)
r = r + 1
}
c = c + 1
}
y2 <- as.data.frame(y2)
length(y2)
length(group)
dim(y2)
dim(group)
y2 <- matrix(0, 17, 347)
for(c in 1:17){
for(r in 1:346){
x <- y[r,c]
y2[c,r] <- as.numeric(x)
r = r + 1
}
c = c + 1
}
y2 <- as.data.frame(y2)
length(y2)
length(group)
dim(y2)
dim(group)
#calculate DIF
DIF <- lordif(y2,group)
y2 <- as.data.frame(y2)
group <- as.data.frame(group)
length(y2)
length(group)
dim(y2)
dim(group)
#calculate DIF
DIF <- lordif(y2,group)
group2 <- matrix(0, 1, 347)
for(r in 1:347){
x <- group[r,1]
group2[1,r] <- as.numeric(x)
r = r + 1
}
group2 <- as.data.frame(group2)
length(y)
length(group2)
dim(y)
dim(group2)
#calculate DIF
DIF <- lordif(y,group2)
#calculate DIF
DIF <- lordif(y2,group2)
#y2 <- as.data.frame(y2)
#group <- as.data.frame(group)
length(y2)
length(group2)
dim(y2)
dim(group2)
#calculate DIF
DIF <- lordif(y2,group2)
DIF <- lordif(y,group2)
group2 <- as.data.frame(group2)
y <- as.data.frame(y)
length(y)
length(group2)
dim(y)
dim(group2)
#calculate DIF
DIF <- lordif(y,group2)
